# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах
# в рамках первых трех уроков. Проанализировать результат и определить программы с наиболее
# эффективным использованием памяти.

import sys

# Урок 3, задача 6
# В одномерном массиве найти сумму элементов, находящихся между минимальным и максимальным элементами.
# Сами минимальный и максимальный элементы в сумму не включать.

import random


a = []
for i in range(0, 10):
    a.append(random.randint(0, 100))

min_pos = 0
max_pos = 0

for i in range(0, 10):
    if a[i] == max(a):
        max_pos = i
    if a[i] == min(a):
        min_pos = i

if max_pos > min_pos:
    result = sum(a[min_pos + 1:max_pos])
else:
    result = sum(a[max_pos + 1:min_pos])

print(a)
print(f'Сумма элементов между макс. и мин. не включительно: {result}')

# подсчет памяти
sum_var = sys.getsizeof(a) + sys.getsizeof(i) + sys.getsizeof(min_pos) + sys.getsizeof(max_pos) + sys.getsizeof(result)
print(sum_var)

# Python 3.9.5
# Windows, 64-разрядная ОС

# Многократный запуск позволил определить, что объем памяти - 292-296 байт
# Под список отведено 184 байта, под остальные переменные (int) - 24-28 байт
# Объем под переменные зависит от счетчика ссылок на объект, ссылки на тип объекта, версии Python

# Вывод по трем задачам: Наиболее эффективное использование памяти (и экономичное) - в задаче №2. За счет заранее
# установленного размера массива в задаче №1 и матрицы в задаче №2 использование памяти будет предсказуемым.
# В задаче №3 объем памяти будет напрямую зависеть от размера матрицы.
